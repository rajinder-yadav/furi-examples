"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BufferedLogger = void 0;
/**
 * Furi - Fast Uniform Resource Identifier.
 *
 * The Fast and Furious Node.js Router.
 * Copyright(c) 2016, 2025 Rajinder Yadav.
 *
 * Labs DevMentor.org Corp. <info@devmentor.org>
 * This code is released as-is without warranty under the "GNU GENERAL PUBLIC LICENSE".
 */
const dntShim = __importStar(require("../_dnt.shims.js"));
const node_path_1 = __importDefault(require("node:path"));
const node_worker_threads_1 = require("node:worker_threads");
const types_js_1 = require("../types.js");
/**
 * Buffered logger class that uses a worker thread to handle logging.
 */
class BufferedLogger {
    constructor(logDirectory, logFileName, enabled, terminal, flushPeriod, logMaxCount, logMode, logLevel) {
        Object.defineProperty(this, "logDirectory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logDirectory
        });
        Object.defineProperty(this, "logFileName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logFileName
        });
        Object.defineProperty(this, "enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: enabled
        });
        Object.defineProperty(this, "terminal", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: terminal
        });
        Object.defineProperty(this, "flushPeriod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: flushPeriod
        });
        Object.defineProperty(this, "logMaxCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logMaxCount
        });
        Object.defineProperty(this, "logMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logMode
        });
        Object.defineProperty(this, "logLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logLevel
        });
        Object.defineProperty(this, "worker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "logLevelRank", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "closed", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: false
        });
        this.logLevelRank = (0, types_js_1.mapToLogLevelRank)(logLevel);
        const dirName = (import.meta || dntShim.dntGlobalThis.Deno) ? import.meta.dirname ?? '' : node_path_1.default.dirname(__filename);
        this.worker = new node_worker_threads_1.Worker(node_path_1.default.join(dirName, 'logger-worker.js'), {
            workerData: {
                logDirectory: this.logDirectory,
                logFileName: this.logFileName,
                enabled: this.enabled,
                flushPeriod: this.flushPeriod,
                logMaxCount: this.logMaxCount,
                logMode: this.logMode
            },
        });
        this.worker.on('error', (err) => {
            console.error('Logger worker error:', err);
        });
        this.worker.on('exit', (code) => {
            if (code !== 0) {
                console.error(`Logger worker stopped with exit code ${code}`);
            }
        });
    }
    close() {
        if (!this.closed) {
            // Send a null message to the worker to signal it to stop processing and exit.
            this.closed = true;
            this.info('Buffered Logger closed.');
            this.info(null);
        }
    }
    debug(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.DEBUG) {
            this.worker.postMessage({ level: types_js_1.LogLevels.DEBUG, message, terminal: this.terminal });
        }
    }
    info(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.INFO) {
            this.worker.postMessage({ level: types_js_1.LogLevels.INFO, message, terminal: this.terminal });
        }
    }
    log(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.LOG) {
            this.worker.postMessage({ level: types_js_1.LogLevels.LOG, message, terminal: this.terminal });
        }
    }
    warm(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.WARN) {
            this.worker.postMessage({ level: types_js_1.LogLevels.WARN, message, terminal: this.terminal });
        }
    }
    error(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.ERROR) {
            this.worker.postMessage({ level: types_js_1.LogLevels.ERROR, message, terminal: this.terminal });
        }
    }
    critical(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.CRITICAL) {
            this.worker.postMessage({ level: types_js_1.LogLevels.CRITICAL, message, terminal: this.terminal });
        }
    }
    fatal(message) {
        if (this.enabled && this.logLevelRank <= types_js_1.LogLevelsRank.FATAL) {
            this.worker.postMessage({ level: types_js_1.LogLevels.FATAL, message, terminal: this.terminal });
        }
    }
}
exports.BufferedLogger = BufferedLogger;
