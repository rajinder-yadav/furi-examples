import { Server } from 'node:http';
import { FuriRouter } from './furi-router.js';
import { FuriConfig, MapOf } from './types.js';
import { StoreState } from './state.js';
import { BufferedLogger } from './utils/buffered-logger.js';
export * from './types.js';
export * from './application-context.js';
export * from './furi-router.js';
type CleanupHandler = () => void;
/**
 * Router Class, matches URI for fast dispatch to handler.
 */
export declare class Furi extends FuriRouter {
    static bufferedLogger: BufferedLogger;
    static readonly appStore: StoreState;
    static readonly httpServer: {
        app: Furi;
        http: Server;
    }[];
    protected server: Server | null;
    protected properties: MapOf<any>;
    cleanupHandler: CleanupHandler | null;
    private furiConfig;
    constructor();
    /**
     * Class static method. Create instance of Router object.
     *
     * @returns Instance of class Furi.
     */
    static create(): Furi;
    static info(message: string): void;
    /**
     * Perform clean shutdown.
     */
    static shutDown(exitTimer: number): void;
    /**
     * Create a new router.
     * @return Instance of class FuriRouter.
     */
    static router(): FuriRouter;
    /**
     * Get Router API version.
     *
     * @returns API version as a string.
     */
    static getApiVersion(): string;
    /**
     * Start server with specified configuration.
     *
     * @param serverConfig  Configuration object for the server.
     * @returns Instance of http.Server.
     */
    listen(serverConfig: FuriConfig): Server;
    /**
     * Starts the Furi server with default or provided configuration.
     *
     * @returns Instance of http.Server.
     */
    start(_callback?: () => void): Server;
    /**
     * Startup server message based on current server configuration.
     *
     * @returns Server message string.
     */
    private getServerStartupMessage;
    /**
     * Startup Server info message based on current server configuration.
     *
     * @returns Server configuration string.
     */
    private getServerInfoMessage;
    /**
     * Startup Logger info message based on current server configuration.
     *
     * @returns Logger configuration string.
     */
    private getLoggerInfoMessage;
    /**
     * Startup runtime info Furi is running under.
     *
     * @returns Runtime info string.
     */
    private getRuntimeMessage;
    /**
     * Register cleanup handler to be called during server shutdown.
     *
     * @param callback Cleanup Function to call.
     */
    preShutdown(callback: () => void): void;
}
//# sourceMappingURL=furi.d.ts.map