/**
 * Furi - Fast Uniform Resource Identifier.
 *
 * The Fast and Furious Node.js Router.
 * Copyright(c) 2016, 2025 Rajinder Yadav.
 *
 * Labs DevMentor.org Corp. <info@devmentor.org>
 * This code is released as-is without warranty under the "GNU GENERAL PUBLIC LICENSE".
 */
import * as dntShim from "../_dnt.shims.js";
import path from "node:path";
import { Worker } from 'node:worker_threads';
import { LogLevels, LogLevelsRank, mapToLogLevelRank } from '../types.js';
/**
 * Buffered logger class that uses a worker thread to handle logging.
 *
 */
export class BufferedLogger {
    constructor(logDirectory, logFileName, enabled, flushPeriod, logMaxCount, logMode, logLevel) {
        Object.defineProperty(this, "logDirectory", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logDirectory
        });
        Object.defineProperty(this, "logFileName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logFileName
        });
        Object.defineProperty(this, "enabled", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: enabled
        });
        Object.defineProperty(this, "flushPeriod", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: flushPeriod
        });
        Object.defineProperty(this, "logMaxCount", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logMaxCount
        });
        Object.defineProperty(this, "logMode", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logMode
        });
        Object.defineProperty(this, "logLevel", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: logLevel
        });
        Object.defineProperty(this, "worker", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "logLevelRank", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.logLevelRank = mapToLogLevelRank(logLevel);
        const dirName = (import.meta || dntShim.dntGlobalThis.Deno) ? import.meta.dirname ?? '' : path.dirname(__filename);
        this.worker = new Worker(path.join(dirName, 'logger-worker.js'), {
            workerData: {
                logDirectory: this.logDirectory,
                logFileName: this.logFileName,
                enabled: this.enabled,
                flushPeriod: this.flushPeriod,
                logMaxCount: this.logMaxCount,
                logMode: this.logMode
            },
        });
        this.worker.on('error', (err) => {
            console.error('Logger worker error:', err);
        });
        this.worker.on('exit', (code) => {
            if (code !== 0) {
                console.error(`Logger worker stopped with exit code ${code}`);
            }
        });
    }
    close() {
        // Send a null message to the worker to signal it to stop processing and exit.
        this.info('BufferedLogger closed.');
        this.info(null);
    }
    debug(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.DEBUG) {
            this.worker.postMessage({ level: LogLevels.DEBUG, message });
        }
    }
    info(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.INFO) {
            this.worker.postMessage({ level: LogLevels.INFO, message });
        }
    }
    log(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.LOG) {
            this.worker.postMessage({ level: LogLevels.LOG, message });
        }
    }
    warm(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.WARN) {
            this.worker.postMessage({ level: LogLevels.WARN, message });
        }
    }
    error(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.ERROR) {
            this.worker.postMessage({ level: LogLevels.ERROR, message });
        }
    }
    critical(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.CRITICAL) {
            this.worker.postMessage({ level: LogLevels.CRITICAL, message });
        }
    }
    fatal(message) {
        if (this.enabled && this.logLevelRank <= LogLevelsRank.FATAL) {
            this.worker.postMessage({ level: LogLevels.FATAL, message });
        }
    }
}
